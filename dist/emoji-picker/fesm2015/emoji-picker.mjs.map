{"version":3,"file":"emoji-picker.mjs","sources":["../../../projects/emoji-picker/src/lib/emoji-picker/emoji-picker.service.ts","../../../projects/emoji-picker/src/lib/@theme/directives/outclick.directive.ts","../../../projects/emoji-picker/src/lib/@theme/directives/autofocus.directive.ts","../../../projects/emoji-picker/src/lib/emoji-picker/emoji-picker.component.ts","../../../projects/emoji-picker/src/lib/emoji-picker/emoji-picker.component.html","../../../projects/emoji-picker/src/lib/emoji-picker/emoji-picker.module.ts","../../../projects/emoji-picker/src/public-api.ts","../../../projects/emoji-picker/src/emoji-picker.ts"],"sourcesContent":["import {Observable} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\nimport {IDataInterface} from '../@core/interfaces/data.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmojiPickerService {\n  constructor(private http: HttpClient) {\n  }\n\n  public getEmojis(): Observable<IDataInterface>{\n    return this.http.get<IDataInterface>('./assets/data/emojis.json');\n  }\n}\n","import {Directive, ElementRef, EventEmitter, HostListener, Output} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[outClick]'\r\n})\r\nexport class OutClickDirective {\r\n  constructor(private elRef: ElementRef) {}\r\n  @Output() outClickEvent: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  toggleOpen(event: any) {\r\n    if ((!this.elRef.nativeElement.contains(event.target)) && !(event.target.className?.includes('emoji-picker--block'))) {\r\n      this.outClickEvent.emit();\r\n    }\r\n  }\r\n}\r\n","import {Directive, ElementRef, OnInit} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[autofocus]'\r\n})\r\nexport class AutofocusDirective implements OnInit {\r\n  constructor(private element: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.element.nativeElement.focus();\r\n  }\r\n}\r\n","import {Subscription} from 'rxjs';\nimport {ICategory, IDataInterface, IEmoji} from '../@core/interfaces/data.interface';\nimport {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\n\nimport {EmojiPickerService} from './emoji-picker.service';\n\n@Component({\n  selector: 'lib-emoji-picker',\n  templateUrl: './emoji-picker.component.html'\n})\nexport class EmojiPickerComponent implements OnInit, OnDestroy {\n  @Input() btnIcon!: string;\n  @Input() searchIcon?: string;\n  @Input() customClass: string = '';\n  @Input() emojisPerRow: number = 9;\n\n  @Output() selectEmojiEvent: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private emojiPickerService: EmojiPickerService) {\n  }\n\n  ngOnInit() {\n    this.getEmojis();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  private subscription!: Subscription;\n  private searchTimer!: ReturnType<typeof setTimeout>;\n\n  public data!: IDataInterface;\n  public selectedEmojis!: IEmoji[];\n  public searchValue: string = '';\n  public showEmojiPicker: boolean = false;\n\n  private getEmojis(): void {\n    this.subscription = this.emojiPickerService.getEmojis().subscribe((data: IDataInterface) => {\n      this.data = data;\n    });\n  }\n\n  private unselectAllCategories(): void {\n    this.data.categories.forEach((category: ICategory) => category.selected = false);\n  }\n\n  private showSelectedEmojis(index: number): void {\n    this.unselectAllCategories();\n    this.data.categories[index].selected = true;\n    this.selectedEmojis = this.data.emojis.filter((emoji: IEmoji) => emoji.categoryId === index + 1);\n  }\n\n  public calcEmojiSize(count: number): string {\n    return `${100 / count}%`;\n  }\n\n  public chooseCategory(index: number): void {\n    this.showSelectedEmojis(index);\n  }\n\n  public selectEmoji(emoji: string): void {\n    this.selectEmojiEvent.emit(emoji);\n  }\n\n  public toggleEmojiPicker(): void {\n    this.showSelectedEmojis(0);\n    this.showEmojiPicker = !this.showEmojiPicker;\n  }\n\n  public searchElement(): void {\n    if (this.searchValue) {\n      clearTimeout(this.searchTimer);\n      this.searchTimer = setTimeout(() => {\n        this.selectedEmojis = this.data.emojis.filter((emoji: IEmoji) =>\n          emoji.keywords.some((key: string) => key.toLowerCase().includes(this.searchValue.toLowerCase())) ||\n          emoji.name.toLowerCase().includes(this.searchValue.toLowerCase())\n        )\n        this.unselectAllCategories();\n      }, 800);\n    } else {\n      setTimeout(() => this.chooseCategory(0), 800);\n    }\n  }\n\n  public closeEmojiPicker(): void {\n    this.showEmojiPicker = false;\n    this.searchValue = '';\n  }\n}\n","<div class=\"emoji-picker\" outClick (outClickEvent)=\"closeEmojiPicker()\">\r\n  <button type=\"button\" class=\"emoji-picker--icon--btn\"\r\n          (click)=\"toggleEmojiPicker()\">\r\n    <ng-container *ngIf=\"btnIcon; else btnIconImg\">\r\n      <span class=\"{{btnIcon}} emoji-picker--icon\"></span>\r\n    </ng-container>\r\n    <ng-template #btnIconImg>\r\n      <img src=\"../assets/images/emoji.svg\" alt=\"\" class=\"emoji-picker--icon--img\">\r\n    </ng-template>\r\n  </button>\r\n  <div *ngIf=\"showEmojiPicker\" class=\"emoji-picker--block\">\r\n    <div class=\"emoji-picker--categories\">\r\n      <div class=\"emoji-picker--category\"\r\n           *ngFor=\"let category of data?.categories; let i = index;\"\r\n           (click)=\"chooseCategory(i)\"\r\n           [ngClass]=\"{'selected': category?.selected}\"\r\n           [ngStyle]=\"{'width': calcEmojiSize(data.categories.length)}\">\r\n        <div>{{category?.emoji}}</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"emoji-picker--search\">\r\n      <input type=\"text\" placeholder=\"Search\" [(ngModel)]=\"searchValue\" (input)=\"searchElement()\" autofocus>\r\n      <ng-container *ngIf=\"searchIcon; else searchIconImg\">\r\n        <span class=\"{{searchIcon}} emoji-picker--icon\"></span>\r\n      </ng-container>\r\n      <ng-template #searchIconImg>\r\n        <img src=\"../assets/images/search.svg\" class=\"emoji-picker--icon--img\" alt=\"\">\r\n      </ng-template>\r\n    </div>\r\n    <div class=\"emoji-picker--emojis\">\r\n      <div class=\"emoji-picker--emoji\"\r\n           *ngFor=\"let emoji of selectedEmojis\"\r\n           (click)=\"selectEmoji(emoji.emoji)\"\r\n           [ngStyle]=\"{'width': calcEmojiSize(emojisPerRow)}\">\r\n        <div title=\"{{emoji?.name}}\">{{emoji?.emoji}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\n\nimport {EmojiPickerComponent} from './emoji-picker.component';\nimport {OutClickDirective} from '../@theme/directives/outclick.directive';\nimport {AutofocusDirective} from '../@theme/directives/autofocus.directive';\n\n@NgModule({\n  declarations: [\n    OutClickDirective,\n    AutofocusDirective,\n    EmojiPickerComponent\n  ],\n  imports: [\n    FormsModule,\n    CommonModule,\n    HttpClientModule\n  ],\n  exports: [\n    EmojiPickerComponent\n  ]\n})\nexport class EmojiPickerModule {\n}\n","/*\n * Public API Surface of emoji-picker\n */\n\nexport * from './lib/emoji-picker/emoji-picker.service';\nexport * from './lib/emoji-picker/emoji-picker.component';\nexport * from './lib/emoji-picker/emoji-picker.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.EmojiPickerService","i2.OutClickDirective","i5.AutofocusDirective"],"mappings":"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"}